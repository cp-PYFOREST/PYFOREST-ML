```{r}
library(tidyverse)
library(ggthemr)
library(plotly)
library(flextable)
```

```{r}
# Read the CSV files
sim5 <- read_csv('/Users/romero61/github/PYFOREST-ML/05-outputs/reports/predictions-log-lut-areas/sim-5-log-lut-area-hectares.csv')
sim25 <- read_csv('/Users/romero61/github/PYFOREST-ML/05-outputs/reports/predictions-log-lut-areas/sim-25-log-lut-area-hectares.csv')
sim50 <- read_csv('/Users/romero61/github/PYFOREST-ML/05-outputs/reports/predictions-log-lut-areas/sim-50-log-lut-area-hectares.csv')
sim50 <- read_csv('/Users/romero61/github/PYFOREST-ML/05-outputs/reports/predictions-log-lut-areas/sim-50-log-lut-area-hectares.csv')

area_by_department_land_use <- readRDS('/Users/romero61/../../capstone/pyforest/shinydata/simulation/bar_plot_datasets/area_by_department_land_use.rds')

```

```{r}


simulation_data <- area_by_department_land_use  |>
  filter((simulation != "Hedgerow incl. 25% Forest Reserve") & (land_use_type != 'paddocks_area')) |>
  group_by(simulation) |>
  summarize(protected_forest = sum(total_area_lu, na.rm = TRUE)) %>%
      arrange(-protected_forest) %>%
      mutate(simulation = factor(
        simulation,
        levels = c(
          "25% Forest Reserve",
          "50% Forest Reserve",
          "5% Forest Reserve"
        ))) |> mutate(Type = "Simulation")

simulation_data

```
```{r}
simulation_data <- area_by_department_land_use  |>
  filter((simulation != "Hedgerow incl. 25% Forest Reserve") & (land_use_type == 'paddocks_area')) |>
  summarize(protected_forest = sum(total_area_lu, na.rm = TRUE))
```


```{r}
# Combine the data frames
prediction_data <- bind_rows(
  sim5 %>% mutate(simulation = "5% Forest Reserve"),
  sim25 %>% mutate(simulation = "25% Forest Reserve"),
  sim50 %>% mutate(simulation = "50% Forest Reserve")) 



predicted_protected <- prediction_data |>
  filter(LandUseType != 'Paddocks') |>
  group_by(simulation) |>
  summarize(protected_forest = sum(NonDeforestedArea, na.rm = TRUE)) |>
  arrange(-protected_forest) %>%
      mutate(simulation = factor(
        simulation,
        levels = c(
          "25% Forest Reserve",
          "5% Forest Reserve",
          "50% Forest Reserve"))) |>
  mutate(Type = "Prediction")


predicted_protected
```


```{r}
# Combine the simulation and prediction data
combined_data <- rbind(
  simulation_data,
  predicted_protected)

## Change the levels of the factor variable 'simulation'
combined_data$simulation <- factor(combined_data$simulation, levels = c("50% Forest Reserve","5% Forest Reserve", "25% Forest Reserve" ))
# Change the labels of the factor variable 'simulation'
levels(combined_data$simulation) <- c("Promotes Forest Conservation", "Prioritize Cattle Production", "Current Law")
```

```{r}
simulation_data$simulation <- factor(simulation_data$simulation, levels = c("50% Forest Reserve","5% Forest Reserve", "25% Forest Reserve" ))

levels(simulation_data$simulation) <- c("Promotes Forest Conservation", "Prioritize Cattle Production", "Current Law")
```




```{r}
color_map = c( "Promotes Forest Conservation" = "#AEBD93",
               "Prioritize Cattle Production" = "#AEBD93",
               "Current Law" = "#AEBD93")
  

 "#AEBD93"  # Sage
  "#4B5F43"  # Hunter Green
"#F6AE2D"  # Orange (Pantone)
  "#A7C7D8"  # Columbia blue

# 
# 
# Reorder the factor levels
simulation_data$simulation <- factor(simulation_data$simulation, levels = c("50% Forest Reserve","5% Forest Reserve", "25% Forest Reserve" ))

levels(simulation_data$simulation) <- c("Promotes Forest Conservation", "Prioritize Cattle Production", "Current Law")
```


```{r}
# Create the bar plot
plot <- ggplot(simulation_data, aes(x = simulation, y = protected_forest, fill = simulation)) +
  geom_bar(stat = 'identity', color = "black", linewidth = 0.25) +
  scale_fill_manual(values = color_map) +
  labs(x = "Simulation", y = "Protected Forest", fill = "simulation") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.background = element_rect(fill = "transparent"),
        legend.position = "top",
        ) +
  coord_flip()  # Flip the coordinates

plot




#ggsave('~/github/Land-Use-Plan-Simulation/img/simulations.png', bg = 'transparent', width = 16, height = 9)

```

```{r}
# Create the side-by-side bar plot
plot_pred <- ggplot(combined_data, aes(x = simulation, y = protected_forest, fill = Type)) +
  geom_bar(stat = 'identity', position = 'dodge', color = "black", linewidth = 0.25) +
  scale_fill_manual(values = c("Simulation" = "#AEBD93", "Prediction" = "#4B5F43")) +
  labs(x = "Simulation", y = "Protected Forest", fill = "Type") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.background = element_rect(fill = "transparent"),
        legend.text = element_text(size = 24),
        legend.title = element_text(size = 24),
        legend.position = "top") +
  coord_flip()  
plot_pred
#ggsave('~/github/Land-Use-Plan-Simulation/img/predictions.png', bg = 'transparent', width = 16, height = 9)
```



`

```{r}
# For simulation data
simulation_summary <- area_by_department_land_use %>%
  group_by(land_use_type) %>%
  summarise(total_area = sum(total_area_lu))

# For prediction data
prediction_summary <- prediction_data %>%
  group_by(LandUseType) %>%
  summarise(total_area = sum(DeforestedArea) + sum(NonDeforestedArea))

names(prediction_summary) <- c("land_use_type", "total_area")

# Add a new column to distinguish between simulation and prediction
simulation_summary <- simulation_summary %>%
  mutate(type = "Simulation")

prediction_summary <- prediction_summary %>%
  mutate(type = "Prediction")


# Combine the two data frames
combined_data <- rbind(simulation_summary, prediction_summary)




ggplot(combined_data, aes(fill=type, y=total_area, x=land_use_type)) + 
  geom_bar(position="dodge", stat="identity") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(x = "Land Use Type", y = "Total Area", fill = "type")


```
